// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TemplateData {
  id         String         @id @default(uuid()) @db.Uuid
  semester   Int
  items      TemplateItem[]
  template   Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String         @db.Uuid
}

model TemplateItem {
  id             String           @id @default(uuid()) @db.Uuid
  name           String
  type           TemplateDataType @default(CORE)
  templateData   TemplateData     @relation(fields: [templateDataId], references: [id], onDelete: Cascade)
  templateDataId String           @db.Uuid
}

model Template {
  id           String         @id @default(uuid()) @db.Uuid
  name         String?
  templateData TemplateData[]
}

model Profile {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  startYear     Int
  startSemester SemesterType
  endYear       Int
  endSemester   SemesterType
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String       @unique @db.Uuid
}

model Plan {
  id              String              @id @default(uuid()) @db.Uuid
  name            String
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @default(now()) @map("updated_at")
  semesters       Semester[]
  transferCredits String[]
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String              @db.Uuid
  requirements    DegreeRequirements?
  startYear       Int
  startSemester   SemesterType
  endYear         Int
  endSemester     SemesterType
}

// TODO(akevinge): Improve naming.
model DegreeRequirements {
  id       String   @id @default(uuid()) @db.Uuid
  major    String // Change to String[] in future once modular requirements implemented; empty plan creates "undecided"
  bypasses String[]
  plan     Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String   @unique @db.Uuid
}

// TODO(akevinge): Remove.
model Bypass {
  id          String @id @default(uuid()) @db.Uuid
  courseCode  String
  requirement String
  hours       Int
}

model Course {
  id              String   @id @default(uuid()) @db.Uuid
  code            String
  color           String   @default("")
  semester        Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId      String   @db.Uuid
  locked          Boolean  @default(false)
  prereqOverriden Boolean  @default(false)

  @@unique([semesterId, code])
}

model Semester {
  id       String       @id @default(uuid()) @db.Uuid
  year     Int
  semester SemesterType
  courses  Course[]
  plan     Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String       @db.Uuid
  color    String       @default("")
  locked   Boolean      @default(false)
}

// TODO(akevinge): Improve naming.
enum SemesterType {
  f
  s
  u
}

// TODO(akevinge): Add Jira ticket for this, removal involves removing 
// quite a bit of code.
model Credit {
  id         String       @id @default(uuid()) @db.Uuid
  courseCode String
  year       Int
  semester   SemesterType
  transfer   Boolean
  user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @db.Uuid
}

// TODO(akevinge): Remove.
model AcademicDetails {
  id Int @id @default(autoincrement())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.Uuid

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid
}

model User {
  id                      String    @id @default(uuid()) @db.Uuid
  email                   String?   @unique
  emailVerified           DateTime?
  onboardingComplete      Boolean   @default(false)
  seenHomeOnboardingModal Boolean   @default(false)
  seenPlanOnboardingModal Boolean   @default(false)
  credit                  Credit[]
  // Multiple accounts can be created when a user signs in with an OAuth provider
  // while signed in with another provider. See: https://github.com/nextauthjs/next-auth/discussions/3116#discussioncomment-1622855.
  accounts                Account[]
  sessions                Session[]
  profile                 Profile?
  plans                   Plan[]
}

// TODO(akevinge): Remove.
model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TemplateDataType {
  CORE
  OPTIONAL
}
